package controllers;

import play.libs.Json;
import play.mvc.Http;
import play.mvc.Result;
import play.data.DynamicForm;
import play.data.Form;
import models.User;
import helpers.ActionAuthenticator;
import helpers.Constants;
import helpers.ControllerHelper;
import helpers.Constants.Messages;
import play.mvc.Controller;
import play.mvc.Security;

/**
 * @author Diego Sepulveda Blanco
 */
public class Users extends Controller {
	
	/**
	 * Action method for POST /user.
	 * User attributes must be pass in the body of the request
	 */
	public Result create() {
		Form<User> form = Form.form(User.class).bindFromRequest();
		if (form.hasErrors()) {
			return badRequest(ControllerHelper.errorToJson(1, Messages.User.INVALID, form.errorsAsJson()));
		}

		User user = form.get();
		user.cleanAutogeneratedFields();
		
		if(user.existSomeUserWithThisUserName(user.getUser())) {
			return status(Http.Status.CONFLICT, ControllerHelper.generateJsonResponse(2, Messages.User.DUPLICATE_USER_NAME, user.getUser()));
		}
		
		user.save();
		response().getHeaders().put(Constants.Headers.USER_TOKEN, user.getAuthToken());
		return created(ControllerHelper.generateJsonResponse(3, Messages.User.CREATED, user.getUser()));
	}
	
	/**
	 * Action method for POST /user/login/<uId>
	 * 
	 */
	public Result login() {
		DynamicForm form = DynamicForm.form().bindFromRequest();
		String userName = form.get("user");
		String password = form.get("pass");
		
    	if(userName == null || password == null) {
    		return badRequest(ControllerHelper.generateJsonResponse(4, Messages.User.NUMBER_OF_PARAMETERS));
    	}

    	User user = new User(userName, password);
    	user = user.login();
		
		if(user == null) {
			return badRequest(ControllerHelper.generateJsonResponse(5, Messages.User.LOGIN_FAILURE));
		}
		
		response().getHeaders().put(Constants.Headers.USER_TOKEN, user.getAuthToken());
		
		if (ControllerHelper.acceptsJson(request())) {
			return ok(Json.toJson(user));
		}
		
		if (ControllerHelper.acceptsXml(request())) {
			return ok(views.xml._user.render(user));
		}

		return badRequest(ControllerHelper.generateJsonResponse(6, Messages.Common.UNSUPPORTED_FORMAT));
	}

	/**
	 * Action method for PUT /user/<uId>
	 * User attributes to be modified must be pass in the body of the request
	 * 
	 * @param uId user identifier to modify
	 */
	@Security.Authenticated(ActionAuthenticator.class)
	public Result update(Long uId) {
		User user = User.find.byId(uId);
		if (user == null) {
			return notFound(ControllerHelper.generateJsonResponse(7, Messages.User.NOT_FOUND, uId));
		}
		
		if(!user.getUser().equals(request().username())) {
			return badRequest(ControllerHelper.generateJsonResponse(8, Messages.User.TOKEN_ID_CONFLICT));
		}
		
		DynamicForm form = DynamicForm.form().bindFromRequest();
		String userName = form.get("user");
		String password = form.get("pass");
		String name = form.get("name");

		User userMod = new User(userName, password, name);
		if(userMod.getUser() != null && user.existSomeUserWithThisUserName(userMod.getUser())) {
			return status(Http.Status.CONFLICT, ControllerHelper.generateJsonResponse(10, Messages.User.DUPLICATE_USER_NAME, userMod.getUser()));
		}
		
		if (!user.changeData(userMod)) {
			return status(Http.Status.NOT_MODIFIED, ControllerHelper.generateJsonResponse(11, Messages.User.NOT_MODIFIED));
		}
		
		user.update();
		response().getHeaders().put(Constants.Headers.USER_TOKEN, user.getAuthToken());
		return ok(ControllerHelper.generateJsonResponse(12, Messages.User.UPDATED));
	}
	
	/**
	 * Action method for DELETE /user/<uId>
	 * 
	 * @param uId user identifier to delete
	 */
	@Security.Authenticated(ActionAuthenticator.class)
	public Result delete(Long uId) {
		User user = User.find.byId(uId);
		if (user == null) {
			return notFound(ControllerHelper.generateJsonResponse(13, Messages.User.NOT_FOUND, uId));
		}

		if(!user.getUser().equals(request().username())) {
			return badRequest(ControllerHelper.generateJsonResponse(14, Messages.User.TOKEN_ID_CONFLICT));
		}

		user.delete();
		return ok(ControllerHelper.generateJsonResponse(15, Messages.User.DELETED));
	}

}
